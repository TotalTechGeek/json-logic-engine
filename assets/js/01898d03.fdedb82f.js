"use strict";(self.webpackChunkjson_logic_engine_documentation=self.webpackChunkjson_logic_engine_documentation||[]).push([[448],{8815:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>c,contentTitle:()=>d,default:()=>x,frontMatter:()=>o,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"context","title":"Context Operators","description":"Context Operators","source":"@site/docs/context.mdx","sourceDirName":".","slug":"/context","permalink":"/json-logic-engine/docs/context","draft":false,"unlisted":false,"editUrl":"https://github.com/TotalTechGeek/json-logic-engine-documentation/edit/master/website/docs/context.mdx","tags":[],"version":"current","frontMatter":{"id":"context","title":"Context Operators"},"sidebar":"someSidebar","previous":{"title":"Miscellaneous Operators","permalink":"/json-logic-engine/docs/misc"},"next":{"title":"Higher Order Operators","permalink":"/json-logic-engine/docs/higher"}}');var i=s(4848),r=s(8453),a=s(9126);const o={id:"context",title:"Context Operators"},d=void 0,c={},l=[{value:"var",id:"var",level:2},{value:"Missing",id:"missing",level:2},{value:"Missing Some",id:"missing-some",level:2}];function h(e){const t={code:"code",h2:"h2",p:"p",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)("h1",{children:"Context Operators"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Operators"}),(0,i.jsx)(t.th,{children:"Instruction"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"var"}),(0,i.jsx)(t.td,{children:"var"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"missing"}),(0,i.jsx)(t.td,{children:"missing"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"missing_some"}),(0,i.jsx)(t.td,{children:"missing_some"})]})]})]}),"\n",(0,i.jsx)(t.p,{children:"These operators allow you to fetch data from the context & check for the existence of values."}),"\n",(0,i.jsx)("br",{}),"\n",(0,i.jsx)(t.p,{children:"Additionally, these operators support handlebars style data traversal  inside of higher order operators (next page)."}),"\n",(0,i.jsx)(t.h2,{id:"var",children:"var"}),"\n",(0,i.jsxs)(t.p,{children:["By just using ",(0,i.jsx)(t.code,{children:"''"})," as the input for var, you can get the current value that is in scope, regardless of its type."]}),"\n",(0,i.jsx)(a.A,{defaultLogic:{var:""},defaultData:"Test"}),"\n",(0,i.jsx)(t.p,{children:"If you wish, you can drill down and fetch specific properties:"}),"\n",(0,i.jsx)(a.A,{defaultLogic:{"+":[{var:"a"},{var:"b.c"},{var:"d.0"}]},defaultData:{a:1,b:{c:2},d:[3]}}),"\n",(0,i.jsx)(t.h2,{id:"missing",children:"Missing"}),"\n",(0,i.jsx)(t.p,{children:'Returns an array of the values that are "missing"'}),"\n",(0,i.jsx)(a.A,{defaultLogic:{missing:["a","b"]},defaultData:{a:!0}}),"\n",(0,i.jsx)(t.h2,{id:"missing-some",children:"Missing Some"}),"\n",(0,i.jsxs)(t.p,{children:["From ",(0,i.jsx)(t.code,{children:"json-logic-js"}),", passing in the number of required variables & the variable names, if it has enough of them, it'll return an empty array, otherwise it'll return the items that are missing."]}),"\n",(0,i.jsx)(a.A,{defaultLogic:{missing_some:[1,["a","b","c"]]},defaultData:{a:!0}})]})}function x(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}}}]);