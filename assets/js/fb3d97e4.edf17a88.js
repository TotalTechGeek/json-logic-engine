"use strict";(self.webpackChunkjson_logic_engine_documentation=self.webpackChunkjson_logic_engine_documentation||[]).push([[837],{5091:(n,e,o)=>{o.r(e),o.d(e,{assets:()=>a,contentTitle:()=>c,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"async","title":"Asynchronous Engine","description":"Asynchronous Engine","source":"@site/docs/async.md","sourceDirName":".","slug":"/async","permalink":"/json-logic-engine/docs/async","draft":false,"unlisted":false,"editUrl":"https://github.com/TotalTechGeek/json-logic-engine-documentation/edit/master/website/docs/async.md","tags":[],"version":"current","frontMatter":{"id":"async","title":"Asynchronous Engine"},"sidebar":"someSidebar","previous":{"title":"Adding Methods","permalink":"/json-logic-engine/docs/methods"},"next":{"title":"Blazing Fast via Compilation","permalink":"/json-logic-engine/docs/doc2"}}');var i=o(4848),t=o(8453);const r={id:"async",title:"Asynchronous Engine"},c=void 0,a={},l=[{value:"Asynchronous Engine",id:"asynchronous-engine",level:2}];function d(n){const e={code:"code",h2:"h2",p:"p",pre:"pre",...(0,t.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h2,{id:"asynchronous-engine",children:"Asynchronous Engine"}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.code,{children:"json-logic-engine"})," comes with built-in support for asynchronous operations, so that you may integrate with external data sources our modules that may only resolve via Promises."]}),"\n",(0,i.jsx)("br",{}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",children:"import { AsyncLogicEngine } from 'json-logic-engine'\n\nconst engine = new AsyncLogicEngine()\n\nengine.addMethod('after250ms', async (n) => {\n    return new Promise(resolve => {\n        setTimeout(() => {\n            resolve(n)\n        }, 250)\n    })\n})\n\nasync function main () {\n    const f = await engine.build({ '+': [{ after250ms: 1 }, 1] })\n    console.log(await f()) // prints 2\n}\n"})}),"\n",(0,i.jsx)(e.p,{children:"At the time of writing, there are no built-in asynchronous operations, although each of the higher order operators are built-with support for asynchronous operations. (so you can map/filter/reduce/etc using async methods.)"})]})}function u(n={}){const{wrapper:e}={...(0,t.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(d,{...n})}):d(n)}}}]);