"use strict";(self.webpackChunkjson_logic_engine_documentation=self.webpackChunkjson_logic_engine_documentation||[]).push([[659],{1719:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"doc3","title":"Differences from json-logic-js","description":"At the time of writing, json-logic-engine is  100% compatible with json-logic-js\'s test suite","source":"@site/docs/doc3.md","sourceDirName":".","slug":"/doc3","permalink":"/json-logic-engine/docs/doc3","draft":false,"unlisted":false,"editUrl":"https://github.com/TotalTechGeek/json-logic-engine-documentation/edit/master/website/docs/doc3.md","tags":[],"version":"current","frontMatter":{"id":"doc3","title":"Differences from json-logic-js"},"sidebar":"someSidebar","previous":{"title":"Blazing Fast via Compilation","permalink":"/json-logic-engine/docs/doc2"},"next":{"title":"Math Operators","permalink":"/json-logic-engine/docs/math"}}');var s=i(4848),o=i(8453);const r={id:"doc3",title:"Differences from json-logic-js"},a=void 0,c={},l=[{value:"Empty Arrays are Truthy",id:"empty-arrays-are-truthy",level:3},{value:"&quot;all&quot; with zero items evaluates to true",id:"all-with-zero-items-evaluates-to-true",level:3}];function d(e){const t={code:"code",h3:"h3",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(t.p,{children:["At the time of writing, ",(0,s.jsx)(t.code,{children:"json-logic-engine"})," is  100% compatible with ",(0,s.jsx)(t.code,{children:"json-logic-js"}),"'s test suite"]}),"\n",(0,s.jsx)(t.p,{children:"However, in order to switch to fully compatible behaviors, you must pass a flag into the constructor."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",children:"const engine = new LogicEngine(undefined, { compatible: true })\n"})}),"\n",(0,s.jsx)(t.p,{children:"This will make minor modifications to truthiness rules. In the future, I will likely make this the default behavior."}),"\n",(0,s.jsx)(t.h3,{id:"empty-arrays-are-truthy",children:"Empty Arrays are Truthy"}),"\n",(0,s.jsxs)(t.p,{children:["By default, empty arrays are truthy in ",(0,s.jsx)(t.code,{children:"json-logic-engine"})," while they are falsy in ",(0,s.jsx)(t.code,{children:"json-logic-js"}),". This is likely due to JSON Logic's roots in PHP."]}),"\n",(0,s.jsx)(t.h3,{id:"all-with-zero-items-evaluates-to-true",children:'"all" with zero items evaluates to true'}),"\n",(0,s.jsxs)(t.p,{children:["To keep in line with JavaScript's ",(0,s.jsx)(t.code,{children:"every"})," method by default, ",(0,s.jsx)(t.code,{children:"json-logic-engine"})," checks if each item in an array checked against a conditional is true, if there are zero items in the array the method defaults to true."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-json",children:'{\n    "all": [[], { "var": "" }]\n} \n// json-logic-js: false\n// json-logic-engine: true\n'})})]})}function h(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);